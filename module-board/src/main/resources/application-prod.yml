# (실행 환경 prod 설정)
# : 배포 환경 엄중한 환경 설정

spring:
  application:
    # Eureka 에 등록될 서비스 이름 (복제 서버는 같은 이름으로 설정하여 로드밸런싱)
    name: BOARD-PROD

  config:
    activate: # 프로필명 설정
      on-profile: prod

  servlet:
    multipart:
      # !!!multipart 데이터량 설정!!!
      maxFileSize: 50MB
      maxRequestSize: 50MB

springdoc:
  swagger-ui:
    enabled: false # Swagger 문서 공개 여부

# eureka 서버에 전달할 정보 설정
eureka:
  instance:
    hostname: localhost
  client:
    # Eureka Client 로 등록
    register-with-eureka: true
    # Eureka 서버에서 레지스트리를 가져올지 여부
    fetch-registry: false
    healthcheck:
      enabled: true  # Eureka 서버가 /actuator/health 엔드포인트로 상태를 확인
    service-url:
      # Eureka 서버 목록
      defaultZone: http://127.0.0.1:10001/eureka/

# JPA DataSource 설정
datasource-jpa:
  # Database 추가
  # 작명법은, 앞에 db{index}-{제목} 형식으로 하여, datasource 별 충돌을 피하기

  # (서비스 데이터베이스)
  db1-main: # DB 추가
    # 데이터베이스 접속 경로
    # !!!serverTimezone 설정을 데이터베이스의 타임존 설정과 일치시켜주세요.!!!
    # 로컬 DB 접속은 localhost 를 사용하고, 도커에서 로컬 DB 접속시엔 host.docker.internal 를 사용하세요.
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/first_schema?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&zeroDateTimeBehavior=convertToNull&autoReconnect=true
    # 데이터베이스의 사용자명
    username: root
    # 데이터베이스의 패스워드
    password: todo1234!
    # 데이터베이스 접속시 사용하는 드라이버
    driverClassName: com.mysql.cj.jdbc.Driver
    data: classpath:sql/data-h2.sql
    initialization-mode: always
    database-platform: org.hibernate.dialect.MySQLDialect

# Redis DataSource 설정
datasource-redis:
  # Redis 추가
  # 작명법은, 앞에 redis{index}-{제목} 형식으로 하기(다른 datasource 설정과의 통일성을 위해)

  # (주 사용 Redis)
  redis1-main:
    #    node-list: 127.0.0.1:7001, 127.0.0.1:7002, 127.0.0.1:7003, 127.0.0.1:7101, 127.0.0.1:7102, 127.0.0.1:7103
    node-list: 127.0.0.1:7001

# Kafka Cluster 설정
kafka-cluster:
  # Kafka 추가
  # 작명법은, 앞에 kafka{index}-{제목} 형식으로 하여, 충돌을 피하기

  # (주 사용 Kafka)
  kafka1-main:
    # Kafka 브로커에 연결하기 위한 주소를 설정합니다. 여러 개의 브로커가 있을 경우, 콤마로 구분하여 나열합니다.
    uri: localhost:9092,localhost:9093,localhost:9094

    # Consumer용 인증 정보
    consumer:
      username: admin
      password: admin-secret

    # Producer용 인증 정보
    producer:
      username: admin
      password: admin-secret

custom-config: # 프로젝트 내에서 사용하는 커스텀 설정
  # cors 허용 리스트 설정 (설정하지 않으면 모든 요청 허용)
  cors-allow-list: http://localhost:8081, http://127.0.0.1:8081, http://localhost:3000, http://127.0.0.1:3000